package com.yizu.proj.sys.beans.gen;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * This class was generated by MyBatis Generator.
 * This class corresponds to the database table************** favorite
 */
/**
 * This class was generated by MyBatis Generator.
 * This class corresponds to the database table************** favorite
 */
/**
 * This class was generated by MyBatis Generator.
 * This class corresponds to the database table************** favorite
 */
public class FavoriteExampleBase {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table favorite
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table favorite
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table favorite
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table favorite
     *
     * @mbggenerated
     */
    protected int limitStart = -1;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table favorite
     *
     * @mbggenerated
     */
    protected int rowsPerPage = -1;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table favorite
     *
     *
     *
     * @mbggenerated
     */
    public FavoriteExampleBase() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table favorite
     *
     * @param orderByClause String
     *
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table favorite
     *
     *
     * @return the value of java.lang.String
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table favorite
     *
     * @param distinct boolean
     *
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table favorite
     *
     *
     * @return the value of boolean
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table favorite
     *
     *
     * @return the value of java.util.List<Criteria>
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table favorite
     *
     * @param criteria Criteria
     *
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table favorite
     *
     *
     * @return the value of Criteria
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table favorite
     *
     *
     * @return the value of Criteria
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table favorite
     *
     *
     * @return the value of Criteria
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table favorite
     *
     *
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table favorite
     *
     * @param limitStart int
     *
     *
     * @mbggenerated
     */
    public void setLimitStart(int limitStart) {
        this.limitStart=limitStart;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table favorite
     *
     *
     * @return the value of int
     *
     * @mbggenerated
     */
    public int getLimitStart() {
        return limitStart;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table favorite
     *
     * @param rowsPerPage int
     *
     *
     * @mbggenerated
     */
    public void setRowsPerPage(int rowsPerPage) {
        this.rowsPerPage=rowsPerPage;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table favorite
     *
     *
     * @return the value of int
     *
     * @mbggenerated
     */
    public int getRowsPerPage() {
        return rowsPerPage;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table 
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        /**
         * criteria
         */
        protected List<Criterion> criteria;

        /**
         * 构造方法
         */
        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        /**
         * isValid 方法
         *
         * @return boolean
         */
        public boolean isValid() {
            return criteria.size() > 0;
        }

        /**
         * getAllCriteria方法
         * @return criteria
         */
        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        /**
         * getCriteria方法
         * @return criteria
         */
        public List<Criterion> getCriteria() {
            return criteria;
        }

        /**
         * addCriterion方法
         * @param condition 字符串
         */
        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        /**
         * addCriterion方法
         * @param condition 字符串
         * @param value Object对象
         * @param property 字符串
         */
        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        /**
         * addCriterion方法
         * @param condition 字符串
         * @param value1 Object对象
         * @param value2 Object对象
         * @param property 字符串
         */
        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        /**
         *addCriterion("fid is null");
         * @return Criteria this
         */
        public Criteria andFidIsNull() {
            addCriterion("fid is null");
            return (Criteria) this;
        }

        /**
         *addCriterion("fid is not null");
         * @return Criteria this
         */
        public Criteria andFidIsNotNull() {
            addCriterion("fid is not null");
            return (Criteria) this;
        }

        /**
         *andFidEqualTo
         * @param value fid
         * @return Criteria this
         */
        public Criteria andFidEqualTo(String value) {
            addCriterion("fid =", value, "fid");
            return (Criteria) this;
        }

        /**
         *andFidNotEqualTo
         * @param value fid
         * @return Criteria this
         */
        public Criteria andFidNotEqualTo(String value) {
            addCriterion("fid <>", value, "fid");
            return (Criteria) this;
        }

        /**
         *andFidGreaterThan
         * @param value fid
         * @return Criteria this
         */
        public Criteria andFidGreaterThan(String value) {
            addCriterion("fid >", value, "fid");
            return (Criteria) this;
        }

        /**
         *andFidGreaterThanOrEqualTo
         * @param value fid
         * @return Criteria this
         */
        public Criteria andFidGreaterThanOrEqualTo(String value) {
            addCriterion("fid >=", value, "fid");
            return (Criteria) this;
        }

        /**
         *andFidLessThan
         * @param value fid
         * @return Criteria this
         */
        public Criteria andFidLessThan(String value) {
            addCriterion("fid <", value, "fid");
            return (Criteria) this;
        }

        /**
         *andFidLessThanOrEqualTo
         * @param value fid
         * @return Criteria this
         */
        public Criteria andFidLessThanOrEqualTo(String value) {
            addCriterion("fid <=", value, "fid");
            return (Criteria) this;
        }

        /**
         *andFidLike
         * @param value fid
         * @return Criteria this
         */
        public Criteria andFidLike(String value) {
            addCriterion("fid like", value, "fid");
            return (Criteria) this;
        }

        /**
         *andFidNotLike
         * @param value fid
         * @return Criteria this
         */
        public Criteria andFidNotLike(String value) {
            addCriterion("fid not like", value, "fid");
            return (Criteria) this;
        }

        /**
         *andFidIn
         * @param values
         * @return Criteria this
         */
        public Criteria andFidIn(List<String> values) {
            addCriterion("fid in", values, "fid");
            return (Criteria) this;
        }

        /**
         *andFidNotIn
         * @param values
         * @return Criteria this
         */
        public Criteria andFidNotIn(List<String> values) {
            addCriterion("fid not in", values, "fid");
            return (Criteria) this;
        }

        /**
         *andFidBetween
         * @param value1
         * @param value2
         * @return Criteria this
         */
        public Criteria andFidBetween(String value1, String value2) {
            addCriterion("fid between", value1, value2, "fid");
            return (Criteria) this;
        }

        /**
         *andFidNotBetween
         * @param value1
         * @param value2
         * @return Criteria this
         */
        public Criteria andFidNotBetween(String value1, String value2) {
            addCriterion("fid not between", value1, value2, "fid");
            return (Criteria) this;
        }

        /**
         *addCriterion("circleId is null");
         * @return Criteria this
         */
        public Criteria andCircleidIsNull() {
            addCriterion("circleId is null");
            return (Criteria) this;
        }

        /**
         *addCriterion("circleId is not null");
         * @return Criteria this
         */
        public Criteria andCircleidIsNotNull() {
            addCriterion("circleId is not null");
            return (Criteria) this;
        }

        /**
         *andCircleidEqualTo
         * @param value circleid
         * @return Criteria this
         */
        public Criteria andCircleidEqualTo(String value) {
            addCriterion("circleId =", value, "circleid");
            return (Criteria) this;
        }

        /**
         *andCircleidNotEqualTo
         * @param value circleid
         * @return Criteria this
         */
        public Criteria andCircleidNotEqualTo(String value) {
            addCriterion("circleId <>", value, "circleid");
            return (Criteria) this;
        }

        /**
         *andCircleidGreaterThan
         * @param value circleid
         * @return Criteria this
         */
        public Criteria andCircleidGreaterThan(String value) {
            addCriterion("circleId >", value, "circleid");
            return (Criteria) this;
        }

        /**
         *andCircleidGreaterThanOrEqualTo
         * @param value circleid
         * @return Criteria this
         */
        public Criteria andCircleidGreaterThanOrEqualTo(String value) {
            addCriterion("circleId >=", value, "circleid");
            return (Criteria) this;
        }

        /**
         *andCircleidLessThan
         * @param value circleid
         * @return Criteria this
         */
        public Criteria andCircleidLessThan(String value) {
            addCriterion("circleId <", value, "circleid");
            return (Criteria) this;
        }

        /**
         *andCircleidLessThanOrEqualTo
         * @param value circleid
         * @return Criteria this
         */
        public Criteria andCircleidLessThanOrEqualTo(String value) {
            addCriterion("circleId <=", value, "circleid");
            return (Criteria) this;
        }

        /**
         *andCircleidLike
         * @param value circleid
         * @return Criteria this
         */
        public Criteria andCircleidLike(String value) {
            addCriterion("circleId like", value, "circleid");
            return (Criteria) this;
        }

        /**
         *andCircleidNotLike
         * @param value circleid
         * @return Criteria this
         */
        public Criteria andCircleidNotLike(String value) {
            addCriterion("circleId not like", value, "circleid");
            return (Criteria) this;
        }

        /**
         *andCircleidIn
         * @param values
         * @return Criteria this
         */
        public Criteria andCircleidIn(List<String> values) {
            addCriterion("circleId in", values, "circleid");
            return (Criteria) this;
        }

        /**
         *andCircleidNotIn
         * @param values
         * @return Criteria this
         */
        public Criteria andCircleidNotIn(List<String> values) {
            addCriterion("circleId not in", values, "circleid");
            return (Criteria) this;
        }

        /**
         *andCircleidBetween
         * @param value1
         * @param value2
         * @return Criteria this
         */
        public Criteria andCircleidBetween(String value1, String value2) {
            addCriterion("circleId between", value1, value2, "circleid");
            return (Criteria) this;
        }

        /**
         *andCircleidNotBetween
         * @param value1
         * @param value2
         * @return Criteria this
         */
        public Criteria andCircleidNotBetween(String value1, String value2) {
            addCriterion("circleId not between", value1, value2, "circleid");
            return (Criteria) this;
        }

        /**
         *addCriterion("userId is null");
         * @return Criteria this
         */
        public Criteria andUseridIsNull() {
            addCriterion("userId is null");
            return (Criteria) this;
        }

        /**
         *addCriterion("userId is not null");
         * @return Criteria this
         */
        public Criteria andUseridIsNotNull() {
            addCriterion("userId is not null");
            return (Criteria) this;
        }

        /**
         *andUseridEqualTo
         * @param value userid
         * @return Criteria this
         */
        public Criteria andUseridEqualTo(Integer value) {
            addCriterion("userId =", value, "userid");
            return (Criteria) this;
        }

        /**
         *andUseridNotEqualTo
         * @param value userid
         * @return Criteria this
         */
        public Criteria andUseridNotEqualTo(Integer value) {
            addCriterion("userId <>", value, "userid");
            return (Criteria) this;
        }

        /**
         *andUseridGreaterThan
         * @param value userid
         * @return Criteria this
         */
        public Criteria andUseridGreaterThan(Integer value) {
            addCriterion("userId >", value, "userid");
            return (Criteria) this;
        }

        /**
         *andUseridGreaterThanOrEqualTo
         * @param value userid
         * @return Criteria this
         */
        public Criteria andUseridGreaterThanOrEqualTo(Integer value) {
            addCriterion("userId >=", value, "userid");
            return (Criteria) this;
        }

        /**
         *andUseridLessThan
         * @param value userid
         * @return Criteria this
         */
        public Criteria andUseridLessThan(Integer value) {
            addCriterion("userId <", value, "userid");
            return (Criteria) this;
        }

        /**
         *andUseridLessThanOrEqualTo
         * @param value userid
         * @return Criteria this
         */
        public Criteria andUseridLessThanOrEqualTo(Integer value) {
            addCriterion("userId <=", value, "userid");
            return (Criteria) this;
        }

        /**
         *andUseridIn
         * @param values
         * @return Criteria this
         */
        public Criteria andUseridIn(List<Integer> values) {
            addCriterion("userId in", values, "userid");
            return (Criteria) this;
        }

        /**
         *andUseridNotIn
         * @param values
         * @return Criteria this
         */
        public Criteria andUseridNotIn(List<Integer> values) {
            addCriterion("userId not in", values, "userid");
            return (Criteria) this;
        }

        /**
         *andUseridBetween
         * @param value1
         * @param value2
         * @return Criteria this
         */
        public Criteria andUseridBetween(Integer value1, Integer value2) {
            addCriterion("userId between", value1, value2, "userid");
            return (Criteria) this;
        }

        /**
         *andUseridNotBetween
         * @param value1
         * @param value2
         * @return Criteria this
         */
        public Criteria andUseridNotBetween(Integer value1, Integer value2) {
            addCriterion("userId not between", value1, value2, "userid");
            return (Criteria) this;
        }

        /**
         *addCriterion("fDateTime is null");
         * @return Criteria this
         */
        public Criteria andFdatetimeIsNull() {
            addCriterion("fDateTime is null");
            return (Criteria) this;
        }

        /**
         *addCriterion("fDateTime is not null");
         * @return Criteria this
         */
        public Criteria andFdatetimeIsNotNull() {
            addCriterion("fDateTime is not null");
            return (Criteria) this;
        }

        /**
         *andFdatetimeEqualTo
         * @param value fdatetime
         * @return Criteria this
         */
        public Criteria andFdatetimeEqualTo(Date value) {
            addCriterion("fDateTime =", value, "fdatetime");
            return (Criteria) this;
        }

        /**
         *andFdatetimeNotEqualTo
         * @param value fdatetime
         * @return Criteria this
         */
        public Criteria andFdatetimeNotEqualTo(Date value) {
            addCriterion("fDateTime <>", value, "fdatetime");
            return (Criteria) this;
        }

        /**
         *andFdatetimeGreaterThan
         * @param value fdatetime
         * @return Criteria this
         */
        public Criteria andFdatetimeGreaterThan(Date value) {
            addCriterion("fDateTime >", value, "fdatetime");
            return (Criteria) this;
        }

        /**
         *andFdatetimeGreaterThanOrEqualTo
         * @param value fdatetime
         * @return Criteria this
         */
        public Criteria andFdatetimeGreaterThanOrEqualTo(Date value) {
            addCriterion("fDateTime >=", value, "fdatetime");
            return (Criteria) this;
        }

        /**
         *andFdatetimeLessThan
         * @param value fdatetime
         * @return Criteria this
         */
        public Criteria andFdatetimeLessThan(Date value) {
            addCriterion("fDateTime <", value, "fdatetime");
            return (Criteria) this;
        }

        /**
         *andFdatetimeLessThanOrEqualTo
         * @param value fdatetime
         * @return Criteria this
         */
        public Criteria andFdatetimeLessThanOrEqualTo(Date value) {
            addCriterion("fDateTime <=", value, "fdatetime");
            return (Criteria) this;
        }

        /**
         *andFdatetimeIn
         * @param values
         * @return Criteria this
         */
        public Criteria andFdatetimeIn(List<Date> values) {
            addCriterion("fDateTime in", values, "fdatetime");
            return (Criteria) this;
        }

        /**
         *andFdatetimeNotIn
         * @param values
         * @return Criteria this
         */
        public Criteria andFdatetimeNotIn(List<Date> values) {
            addCriterion("fDateTime not in", values, "fdatetime");
            return (Criteria) this;
        }

        /**
         *andFdatetimeBetween
         * @param value1
         * @param value2
         * @return Criteria this
         */
        public Criteria andFdatetimeBetween(Date value1, Date value2) {
            addCriterion("fDateTime between", value1, value2, "fdatetime");
            return (Criteria) this;
        }

        /**
         *andFdatetimeNotBetween
         * @param value1
         * @param value2
         * @return Criteria this
         */
        public Criteria andFdatetimeNotBetween(Date value1, Date value2) {
            addCriterion("fDateTime not between", value1, value2, "fdatetime");
            return (Criteria) this;
        }

        /**
         *addCriterion("ftype is null");
         * @return Criteria this
         */
        public Criteria andFtypeIsNull() {
            addCriterion("ftype is null");
            return (Criteria) this;
        }

        /**
         *addCriterion("ftype is not null");
         * @return Criteria this
         */
        public Criteria andFtypeIsNotNull() {
            addCriterion("ftype is not null");
            return (Criteria) this;
        }

        /**
         *andFtypeEqualTo
         * @param value ftype
         * @return Criteria this
         */
        public Criteria andFtypeEqualTo(String value) {
            addCriterion("ftype =", value, "ftype");
            return (Criteria) this;
        }

        /**
         *andFtypeNotEqualTo
         * @param value ftype
         * @return Criteria this
         */
        public Criteria andFtypeNotEqualTo(String value) {
            addCriterion("ftype <>", value, "ftype");
            return (Criteria) this;
        }

        /**
         *andFtypeGreaterThan
         * @param value ftype
         * @return Criteria this
         */
        public Criteria andFtypeGreaterThan(String value) {
            addCriterion("ftype >", value, "ftype");
            return (Criteria) this;
        }

        /**
         *andFtypeGreaterThanOrEqualTo
         * @param value ftype
         * @return Criteria this
         */
        public Criteria andFtypeGreaterThanOrEqualTo(String value) {
            addCriterion("ftype >=", value, "ftype");
            return (Criteria) this;
        }

        /**
         *andFtypeLessThan
         * @param value ftype
         * @return Criteria this
         */
        public Criteria andFtypeLessThan(String value) {
            addCriterion("ftype <", value, "ftype");
            return (Criteria) this;
        }

        /**
         *andFtypeLessThanOrEqualTo
         * @param value ftype
         * @return Criteria this
         */
        public Criteria andFtypeLessThanOrEqualTo(String value) {
            addCriterion("ftype <=", value, "ftype");
            return (Criteria) this;
        }

        /**
         *andFtypeLike
         * @param value ftype
         * @return Criteria this
         */
        public Criteria andFtypeLike(String value) {
            addCriterion("ftype like", value, "ftype");
            return (Criteria) this;
        }

        /**
         *andFtypeNotLike
         * @param value ftype
         * @return Criteria this
         */
        public Criteria andFtypeNotLike(String value) {
            addCriterion("ftype not like", value, "ftype");
            return (Criteria) this;
        }

        /**
         *andFtypeIn
         * @param values
         * @return Criteria this
         */
        public Criteria andFtypeIn(List<String> values) {
            addCriterion("ftype in", values, "ftype");
            return (Criteria) this;
        }

        /**
         *andFtypeNotIn
         * @param values
         * @return Criteria this
         */
        public Criteria andFtypeNotIn(List<String> values) {
            addCriterion("ftype not in", values, "ftype");
            return (Criteria) this;
        }

        /**
         *andFtypeBetween
         * @param value1
         * @param value2
         * @return Criteria this
         */
        public Criteria andFtypeBetween(String value1, String value2) {
            addCriterion("ftype between", value1, value2, "ftype");
            return (Criteria) this;
        }

        /**
         *andFtypeNotBetween
         * @param value1
         * @param value2
         * @return Criteria this
         */
        public Criteria andFtypeNotBetween(String value1, String value2) {
            addCriterion("ftype not between", value1, value2, "ftype");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table favorite
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        /**
         * 构造方法
         * 继承父类
         */
        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table 
     *
     * @mbggenerated
     */
    public static class Criterion {
        /**
         * condition
         */
        private String condition;

        /**
         * value
         */
        private Object value;

        /**
         * secondValue
         */
        private Object secondValue;

        /**
         * noValue
         */
        private boolean noValue;

        /**
         * singleValue
         */
        private boolean singleValue;

        /**
         * betweenValue
         */
        private boolean betweenValue;

        /**
         * listValue
         */
        private boolean listValue;

        /**
         * typeHandler
         */
        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        /**
         * Criterion构造方法
         * 继承父类
         * @param condition 字符串
         */
        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        /**
         * Criterion构造方法
         * 继承父类
         * @param condition 字符串
         * @param value object对象
         * @param typeHandler 字符串
         */
        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        /**
         * Criterion构造方法
         * @param condition 字符串
         * @param value object对象
         */
        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        /**
         * Criterion构造方法
         * 继承父类
         * @param condition 字符串
         * @param value object对象
         * @param secondValue object对象
         * @param typeHandler 字符串
         */
        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        /**
         * Criterion构造方法
         * 继承父类
         * @param condition 字符串
         * @param value object对象
         * @param secondValue object对象
         */
        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}